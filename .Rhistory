nc_map_data <- st_transform(nc_map_data, "+proj=longlat +datum=WGS84")
nc_map_data <- merge(nc_geo, nc_data, by = "Precinct")
nc_geo <- sf::st_read("district-shapes/district-shapes.shp", stringsAsFactors = FALSE)
names(nc_geo)[2] <- "Precinct"
nc_map_data <- merge(nc_geo, nc_data, by = "Precinct")
nc_map_data <- st_transform(nc_map_data, "+proj=longlat +datum=WGS84")
min_max_values <- range(nc_map_data$Margin, na.rm = TRUE)
gop_palette <- colorNumeric(palette = "Reds", domain=c(min_max_values[1], min_max_values[2]))
dem_palette <- colorNumeric(palette = "Blues", domain=c(min_max_values[1], min_max_values[[2]]))
gop_df <- nc_map_data[nc_map_data$Winner == "GOP",]
dem_df <- nc_map_data[nc_map_data$Winner == "Dem",]
gop_popup <- glue("<strong>{gop_df$County} COUNTY</strong><br /><strong>Winner: gop</strong><br />gop: {scales::comma(gop_df$gop, accuracy = 1)}<br />dem: {scales::comma(gop_df$dem, accuracy = 1)}<br />Margin: {scales::comma(gop_df$Margin, accuracy = 1)}")  %>%   lapply(htmltools::HTML)
dem_popup <- glue("<strong>{dem_df$County} COUNTY</strong><br /><strong>Winner: dem</strong><br />dem: {scales::comma(dem_df$dem, accuracy = 1)}<br />gop: {scales::comma(dem_df$gop, accuracy = 1)}<br />Margin: {scales::comma(dem_df$Margin, accuracy = 1)}")  %>%   lapply(htmltools::HTML)
leaflet() %>%
addProviderTiles("CartoDB.Positron")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = gop_df,
fillColor = ~gop_palette(gop_df$Margin),
label = gop_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
) %>%
addPolygons(
data = dem_df,
fillColor = ~dem_palette(dem_df$Margin),
label = dem_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
)
library(dplyr); library(glue); library(scales);
library(dplyr); library(glue); library(scales);
library(htmltools); library(sf); library(leaflet)
nc_data <-rio::import("https://docs.google.com/spreadsheets/d/e/2PACX-1vRJlNCno0tfvGHa-fqB2ZoIuBWTUgcCPKwZVMNEeVDyDbrwOmpTbZ83ujVpXaaYACBmGmUQbz_ZFzrB/pub?gid=384233468&single=true&output=csv")
nc_geo <- sf::st_read("district-shapes/district-shapes.shp", stringsAsFactors = FALSE)
names(nc_geo)[2] <- "Precinct"
nc_map_data <- merge(nc_geo, nc_data, by = "Precinct")
nc_map_data <- st_transform(nc_map_data, "+proj=longlat +datum=WGS84")
min_max_values <- range(nc_map_data$Margin, na.rm = TRUE)
gop_palette <- colorNumeric(palette = "Reds", domain=c(min_max_values[1], min_max_values[2]))
dem_palette <- colorNumeric(palette = "Blues", domain=c(min_max_values[1], min_max_values[[2]]))
gop_df <- nc_map_data[nc_map_data$Winner == "GOP",]
dem_df <- nc_map_data[nc_map_data$Winner == "Dem",]
gop_popup <- glue("<strong>{gop_df$County} COUNTY</strong><br /><strong>Winner: gop</strong><br />gop: {scales::comma(gop_df$gop, accuracy = 1)}<br />dem: {scales::comma(gop_df$dem, accuracy = 1)}<br />Margin: {scales::comma(gop_df$Margin, accuracy = 1)}")  %>%   lapply(htmltools::HTML)
dem_popup <- glue("<strong>{dem_df$County} COUNTY</strong><br /><strong>Winner: dem</strong><br />dem: {scales::comma(dem_df$dem, accuracy = 1)}<br />gop: {scales::comma(dem_df$gop, accuracy = 1)}<br />Margin: {scales::comma(dem_df$Margin, accuracy = 1)}")  %>%   lapply(htmltools::HTML)
leaflet() %>%
addProviderTiles("CartoDB.Positron")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = gop_df,
fillColor = ~gop_palette(gop_df$Margin),
label = gop_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
) %>%
addPolygons(
data = dem_df,
fillColor = ~dem_palette(dem_df$Margin),
label = dem_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
)
library(dplyr); library(glue); library(scales);
library(htmltools); library(sf); library(leaflet)
nc_data <-rio::import("president2020.csv")
nc_geo <- sf::st_read("district-shapes/district-shapes.shp", stringsAsFactors = FALSE)
names(nc_geo)[2] <- "Precinct"
nc_map_data <- merge(nc_geo, nc_data, by = "Precinct")
nc_map_data <- st_transform(nc_map_data, "+proj=longlat +datum=WGS84")
min_max_values <- range(nc_map_data$Margin, na.rm = TRUE)
gop_palette <- colorNumeric(palette = "Reds", domain=c(min_max_values[1], min_max_values[2]))
dem_palette <- colorNumeric(palette = "Blues", domain=c(min_max_values[1], min_max_values[[2]]))
gop_df <- nc_map_data[nc_map_data$Winner == "GOP",]
dem_df <- nc_map_data[nc_map_data$Winner == "Dem",]
gop_popup <- glue("<strong>{gop_df$County} COUNTY</strong><br /><strong>Winner: gop</strong><br />gop: {scales::comma(gop_df$gop, accuracy = 1)}<br />dem: {scales::comma(gop_df$dem, accuracy = 1)}<br />Margin: {scales::comma(gop_df$Margin, accuracy = 1)}")  %>%   lapply(htmltools::HTML)
dem_popup <- glue("<strong>{dem_df$County} COUNTY</strong><br /><strong>Winner: dem</strong><br />dem: {scales::comma(dem_df$dem, accuracy = 1)}<br />gop: {scales::comma(dem_df$gop, accuracy = 1)}<br />Margin: {scales::comma(dem_df$Margin, accuracy = 1)}")  %>%   lapply(htmltools::HTML)
leaflet() %>%
addProviderTiles("CartoDB.Positron")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = gop_df,
fillColor = ~gop_palette(gop_df$Margin),
label = gop_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
) %>%
addPolygons(
data = dem_df,
fillColor = ~dem_palette(dem_df$Margin),
label = dem_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = gop_df,
fillColor = ~gop_palette(gop_df$Margin),
label = gop_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
) %>%
addPolygons(
data = dem_df,
fillColor = ~dem_palette(dem_df$Margin),
label = dem_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = gop_df,
fillColor = ~gop_palette(gop_df$Margin),
label = gopp_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
) %>%
addPolygons(
data = dem_df,
fillColor = ~dem_palette(dem_df$Margin),
label = dem_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
)
View(dem_palette)
View(dem_palette)
View(gop_palette)
View(gop_palette)
leaflet() %>%
addProviderTiles("CartoDB.Positron")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = gop_df,
fillColor = ~gop_palette(gop_df$Margin),
label = gopp_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
) %>%
addPolygons(
data = dem_df,
fillColor = ~dem_palette(dem_df$Margin),
label = dem_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
)
addPolygons(
data = dem_df,
fillColor = ~dem_palette(dem_df$Margin),
label = dem_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
) %>%
addPolygons(
data = dem_df,
addPolygons(
data = dem_df,
fillColor = ~dem_palette(dem_df$Margin),
label = dem_popup,
addPolygons(
data = dem_df,
fillColor = ~dem_palette(dem_df$Margin),
label = dem_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
library(dplyr); library(glue); library(scales);
library(htmltools); library(sf); library(leaflet)
nc_data <-rio::import("president2020.csv")
nc_geo <- sf::st_read("district-shapes/district-shapes.shp", stringsAsFactors = FALSE)
names(nc_geo)[2] <- "Precinct"
nc_map_data <- merge(nc_geo, nc_data, by = "Precinct")
nc_map_data <- st_transform(nc_map_data, "+proj=longlat +datum=WGS84")
min_max_values <- range(nc_map_data$Margin, na.rm = TRUE)
gop_palette <- colorNumeric(palette = "Reds", domain=c(min_max_values[1], min_max_values[2]))
dem_palette <- colorNumeric(palette = "Blues", domain=c(min_max_values[1], min_max_values[[2]]))
gop_df <- nc_map_data[nc_map_data$Winner == "GOP",]
dem_df <- nc_map_data[nc_map_data$Winner == "Dem",]
gop_popup <- glue("<strong>{gop_df$County} COUNTY</strong><br /><strong>Winner: gop</strong><br />gop: {scales::comma(gop_df$gop, accuracy = 1)}<br />dem: {scales::comma(gop_df$dem, accuracy = 1)}<br />Margin: {scales::comma(gop_df$Margin, accuracy = 1)}")  %>%   lapply(htmltools::HTML)
dem_popup <- glue("<strong>{dem_df$County} COUNTY</strong><br /><strong>Winner: dem</strong><br />dem: {scales::comma(dem_df$dem, accuracy = 1)}<br />gop: {scales::comma(dem_df$gop, accuracy = 1)}<br />Margin: {scales::comma(dem_df$Margin, accuracy = 1)}")  %>%   lapply(htmltools::HTML)
leaflet() %>%
addProviderTiles("CartoDB.Positron")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = gop_df,
fillColor = ~gop_palette(gop_df$Margin),
label = gopp_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
) %>%
addPolygons(
data = dem_df,
fillColor = ~dem_palette(dem_df$Margin),
label = dem_popup,
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
)
source("~/nc-elections/main.R", echo=TRUE)
source("~/nc-elections/main.R", echo=TRUE)
source("~/nc-elections/main.R", echo=TRUE)
source("~/nc-elections/main.R", echo=TRUE)
source("~/nc-elections/main.R", echo=TRUE)
library(dplyr); library(glue); library(scales);
library(htmltools); library(sf); library(leaflet)
nc_data <-rio::import("president2020.csv")
nc_geo <- sf::st_read("district-shapes.geojson", stringsAsFactors = FALSE)
names(nc_geo)[2] <- "Precinct"
nc_map_data <- merge(nc_geo, nc_data, by = "Precinct")
nc_map_data <- st_transform(nc_map_data, "+proj=longlat +datum=WGS84")
min_max_values <- range(nc_map_data$Margin, na.rm = TRUE)
gop_palette <- colorNumeric(palette = "Reds", domain=c(min_max_values[1], min_max_values[2]))
dem_palette <- colorNumeric(palette = "Blues", domain=c(min_max_values[1], min_max_values[[2]]))
gop_df <- nc_map_data[nc_map_data$Winner == "GOP",]
dem_df <- nc_map_data[nc_map_data$Winner == "Dem",]
leaflet() %>%
addProviderTiles("CartoDB.Positron")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = gop_df,
addPolygons(
data = gop_df,
fillColor = ~gop_palette(gop_df$Margin),
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
leaflet() %>%
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = gop_df,
fillColor = ~gop_palette(gop_df$Margin),
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
) %>%
addPolygons(
data = dem_df,
fillColor = ~dem_palette(dem_df$Margin),
stroke = TRUE,
smoothFactor = 0.2,
fillOpacity = 0.8,
color = "#666",
weight = 1
)
source("~/noblecounty/main.R", echo=TRUE)
source("~/noblecounty/main.R", echo=TRUE)
library(dplyr); library(glue); library(scales);
library(htmltools); library(sf); library(leaflet)
nc_data <-rio::import("county.csv")
nc_geo <- sf::st_read("map.geojson", stringsAsFactors = FALSE)
names(nc_geo)[2] <- "Precinct"
nc_map_data <- merge(nc_geo, nc_data, by.x = "id", by.y = "Precinct")
nc_map_data <- st_transform(nc_map_data, "+proj=longlat +datum=WGS84")
min_max_values <- range(nc_map_data$Margin, na.rm = TRUE)
gop_palette <- colorNumeric(palette = "Reds", domain=c(min_max_values[1], min_max_values[2]), na.color = "FF0000")
dem_palette <- colorNumeric(palette = "Blues", domain=c(min_max_values[1], min_max_values[[2]]))
gop_df <- nc_map_data[nc_map_data$Winner == "GOP",]
dem_df <- nc_map_data[nc_map_data$Winner == "Dem",]
gop_popup <- glue("<strong>Precinct {gop_df$Precinct}</strong><br /><strong>Winner: GOP</strong><br />Township: {gop_df$Township}<br />GOP: {scales::percent(gop_df$Rep, scale = 100)}<br />DEM: {scales::percent(gop_df$Dem, scale = 100)}<br />Margin: {scales::percent(gop_df$Margin, scale = 100)}")  %>%   lapply(htmltools::HTML)
dem_popup <- glue("<strong>Precinct {dem_df$Precinct}</strong><br /><strong>Winner: DEM</strong><br />Township: {dem_df$Township}<br /><br />DEM: {scales::percent(dem_df$Dem, scale = 100)}<br />GOP: {scales::percent(dem_df$Rep, scale = 100)}<br />Margin: {scales::percent(dem_df$Margin, scale = 100)}")  %>%   lapply(htmltools::HTML)
leaflet() %>%
addProviderTiles("CartoDB.Positron")
library(dplyr); library(glue); library(scales);
library(htmltools); library(sf); library(leaflet)
nc_data <-rio::import("county.csv")
nc_geo <- sf::st_read("map.geojson", stringsAsFactors = FALSE)
names(nc_geo)[2] <- "Precinct"
nc_map_data <- merge(nc_geo, nc_data, by.x = "id", by.y = "Precinct")
nc_map_data <- st_transform(nc_map_data, "+proj=longlat +datum=WGS84")
min_max_values <- range(nc_map_data$Margin, na.rm = TRUE)
gop_palette <- colorNumeric(palette = "Reds", domain=c(min_max_values[1], min_max_values[2]), na.color = "FF0000")
dem_palette <- colorNumeric(palette = "Blues", domain=c(min_max_values[1], min_max_values[[2]]))
gop_df <- nc_map_data[nc_map_data$Winner == "GOP",]
dem_df <- nc_map_data[nc_map_data$Winner == "Dem",]
gop_popup <- glue("<strong>Precinct {gop_df$Precinct}</strong><br /><strong>Winner: GOP</strong><br />Township: {gop_df$Township}<br />GOP: {scales::percent(gop_df$Rep, scale = 100)}<br />DEM: {scales::percent(gop_df$Dem, scale = 100)}<br />Margin: {scales::percent(gop_df$Margin, scale = 100)}")  %>%   lapply(htmltools::HTML)
dem_popup <- glue("<strong>Precinct {dem_df$Precinct}</strong><br /><strong>Winner: DEM</strong><br />Township: {dem_df$Township}<br /><br />DEM: {scales::percent(dem_df$Dem, scale = 100)}<br />GOP: {scales::percent(dem_df$Rep, scale = 100)}<br />Margin: {scales::percent(dem_df$Margin, scale = 100)}")  %>%   lapply(htmltools::HTML)
leaflet() %>%
addProviderTiles("CartoDB.Positron")
library(dplyr); library(glue); library(scales);
library(htmltools); library(sf); library(leaflet)
nc_data <-rio::import("county.csv")
election_title <- (nc_data[8,1])
print(election_title)
election_title <- (nc_data[8])
print(election_title)
election_title <- (nc_data[8,1])
print(election_title)
nc_geo <- sf::st_read("map.geojson", stringsAsFactors = FALSE)
names(nc_geo)[2] <- "Precinct"
election_title <- (nc_data[1,8])
print(election_title)
library(dplyr); library(glue); library(scales);
library(htmltools); library(sf); library(leaflet)
nc_data <-rio::import("county.csv")
election_title <- (nc_data[1,8])
nc_geo <- sf::st_read("map.geojson", stringsAsFactors = FALSE)
names(nc_geo)[2] <- "Precinct"
nc_map_data <- merge(nc_geo, nc_data, by.x = "id", by.y = "Precinct")
nc_map_data <- st_transform(nc_map_data, "+proj=longlat +datum=WGS84")
min_max_values <- range(nc_map_data$Margin, na.rm = TRUE)
gop_palette <- colorNumeric(palette = "Reds", domain=c(min_max_values[1], min_max_values[2]), na.color = "FF0000")
dem_palette <- colorNumeric(palette = "Blues", domain=c(min_max_values[1], min_max_values[[2]]))
gop_df <- nc_map_data[nc_map_data$Winner == "GOP",]
dem_df <- nc_map_data[nc_map_data$Winner == "Dem",]
gop_popup <- glue("<strong>Precinct {gop_df$Precinct}</strong><br /><strong>Winner: GOP</strong><br />Township: {gop_df$Township}<br />GOP: {scales::percent(gop_df$Rep, scale = 100)}<br />DEM: {scales::percent(gop_df$Dem, scale = 100)}<br />Margin: {scales::percent(gop_df$Margin, scale = 100)}")  %>%   lapply(htmltools::HTML)
dem_popup <- glue("<strong>Precinct {dem_df$Precinct}</strong><br /><strong>Winner: DEM</strong><br />Township: {dem_df$Township}<br /><br />DEM: {scales::percent(dem_df$Dem, scale = 100)}<br />GOP: {scales::percent(dem_df$Rep, scale = 100)}<br />Margin: {scales::percent(dem_df$Margin, scale = 100)}")  %>%   lapply(htmltools::HTML)
leaflet() %>%
addProviderTiles("CartoDB.Positron")
library(dplyr); library(glue); library(scales);
library(htmltools); library(sf); library(leaflet)
nc_data <-rio::import("county.csv")
election_title <- (nc_data[1,8])
nc_geo <- sf::st_read("map.geojson", stringsAsFactors = FALSE)
names(nc_geo)[2] <- "Precinct"
nc_map_data <- merge(nc_geo, nc_data, by.x = "id", by.y = "Precinct")
nc_map_data <- st_transform(nc_map_data, "+proj=longlat +datum=WGS84")
min_max_values <- range(nc_map_data$Margin, na.rm = TRUE)
gop_palette <- colorNumeric(palette = "Reds", domain=c(min_max_values[1], min_max_values[2]), na.color = "FF0000")
dem_palette <- colorNumeric(palette = "Blues", domain=c(min_max_values[1], min_max_values[[2]]))
gop_df <- nc_map_data[nc_map_data$Winner == "GOP",]
dem_df <- nc_map_data[nc_map_data$Winner == "Dem",]
gop_popup <- glue("<strong>Precinct {gop_df$Precinct}</strong><br /><strong>Winner: GOP</strong><br />Township: {gop_df$Township}<br />GOP: {scales::percent(gop_df$Rep, scale = 100)}<br />DEM: {scales::percent(gop_df$Dem, scale = 100)}<br />Margin: {scales::percent(gop_df$Margin, scale = 100)}")  %>%   lapply(htmltools::HTML)
dem_popup <- glue("<strong>Precinct {dem_df$Precinct}</strong><br /><strong>Winner: DEM</strong><br />Township: {dem_df$Township}<br /><br />DEM: {scales::percent(dem_df$Dem, scale = 100)}<br />GOP: {scales::percent(dem_df$Rep, scale = 100)}<br />Margin: {scales::percent(dem_df$Margin, scale = 100)}")  %>%   lapply(htmltools::HTML)
leaflet() %>%
addProviderTiles("CartoDB.Positron")
